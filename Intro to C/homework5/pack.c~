#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include "wordlist.h"
#include "bits.h"

#define NEED_WORD_FILE 4
#define DONT_NEED_WORD_FILE 3

//Internally, this function uses a resizable array to read the entire contents of the given file into a dynamically allocated string. 
//It will return a pointer to a dynamically allocated, null terminated string containing the entire contents of the file.
//The caller is responsible for freeing this string.
//(Two notes here. If you were successful on exercise 13, you may be able to adapt some of that code for this function.
//Also, this behavior shows one reason why we restrict the set of valid characters that can appear in a text file. 
//In general, there's nothing to prevent arbitrary byte values, even '\0' from appearing in a file.
//By prohibiting certain characters, including '\0', we can use null-terminated strings to hold the contents of the file and words in the word list.)
char *readFile( FILE *fp )
{
  int capacity = WORD_MAX;
  char *buffer = malloc( capacity );

  // Number of characters we're currently using.
  int len = 0;
  
  // Read from standard file until we
  // reach end-of-file, storing all characters in buffer.
  char c = 0;
  while (fscanf(fp, "%c", &c) != EOF){
    
    if(c == EOF){
      break;
    }
    
    buffer[len] = c;
    buffer[len + 1] = '\0';
    len++;
    
    if (len >= capacity / 2){
      capacity *= 2;
      buffer = realloc(buffer, capacity + 2);
    }
   }
  
  return buffer;
}

int main( int argc, char *argv[] )
{
  char *wordFile = "words.txt";
  WordList *wordList;
  
  if (argc != NEED_WORD_FILE && argc != DONT_NEED_WORD_FILE){
    fprintf(stderr, "usage: pack <input.txt> <compressed.raw> [word_file.txt]");
    return EXIT_FAILURE;
  }
  
  if (argc == NEED_WORD_FILE) {
 
    wordList = readWordList( argv[DONT_NEED_WORD_FILE] ); //I mean, argv is ZBI, right?
 
  } else {
   
    wordList = readWordList( wordFile );
 
  }
  
  FILE* input = fopen(argv[1], "r");
  
  if(!input){
    fprintf(stderr, "Can't open file: %s\n", argv[1]);
    exit(EXIT_FAILURE);
  }
  
  FILE* output = fopen(argv[2], "w");
  
  if(!output){
    fprintf(stderr, "Can't open file: %s\n", argv[2]);
    exit(EXIT_FAILURE);
  }
  

#ifdef DEBUG
  // Report the entire contents of the word list, once it's built.
  printf( "---- word list -----\n" );
  for ( int i = 0; i < wordList->len; i++ )
    printf( "%d == %s\n", i, wordList->words[ i ] );
  printf( "--------------------\n" );
#endif

  // ... 

  // Read the contents of the whole file into one big buffer.  This could be more
  // efficient, but it simplifies the rest of the program.
  char *buffer = readFile( input );

  // Write out codes for everything in the buffer.
  int pos = 0;
  PendingBits pending = { 0, 0 };
  while ( buffer[ pos ] ) {
    // Get the next code.
    int code = bestCode( wordList, buffer + pos );


#ifdef DEBUG
    printf( "%d <- %s\n", code, wordList->words[ code ] );
#endif

    // Write it out and move ahead by the number of characters we just encoded.
    writeCode( code, &pending, output );
    pos += strlen( wordList->words[ code ] );
  }

  // Write out any remaining bits in the last, partial byte.
  flushBits( &pending, output );

  fclose(input);
  fclose(output);

  return EXIT_SUCCESS;
}
